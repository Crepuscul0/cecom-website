#!/usr/bin/env node

/**
 * Script para configurar automatizaci√≥n de importaci√≥n RSS
 * Crea un cron job y webhook para actualizaciones regulares
 */

const fs = require('fs')
const path = require('path')

async function setupAutomation() {
  try {
    console.log('ü§ñ Configurando automatizaci√≥n del blog...')
    
    // Crear directorio de configuraci√≥n
    const configDir = path.join(__dirname, '..', 'automation')
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true })
    }
    
    // Configuraci√≥n de cron job
    const cronConfig = {
      schedule: '0 6 * * *', // Diariamente a las 6:00 AM
      command: 'node scripts/import-extreme-rss.js --limit=10',
      description: 'Importaci√≥n diaria de RSS de Extreme Networks',
      enabled: true,
      lastRun: null,
      nextRun: null
    }
    
    fs.writeFileSync(
      path.join(configDir, 'cron-config.json'),
      JSON.stringify(cronConfig, null, 2)
    )
    
    // Script de cron job
    const cronScript = `#!/bin/bash
# Script de cron job para importaci√≥n autom√°tica de RSS
# Agregar a crontab con: crontab -e
# 0 6 * * * /path/to/cecom-website/automation/daily-import.sh

cd "${process.cwd()}"
echo "$(date): Iniciando importaci√≥n autom√°tica de RSS" >> automation/import.log
node scripts/import-extreme-rss.js --limit=10 >> automation/import.log 2>&1
echo "$(date): Importaci√≥n completada" >> automation/import.log
`
    
    fs.writeFileSync(
      path.join(configDir, 'daily-import.sh'),
      cronScript
    )
    
    // Hacer ejecutable el script
    const { exec } = require('child_process')
    exec(`chmod +x ${path.join(configDir, 'daily-import.sh')}`)
    
    // Configuraci√≥n de webhook
    const webhookConfig = {
      endpoint: '/api/webhook/rss-import',
      secret: 'cecom-rss-webhook-' + Math.random().toString(36).substring(7),
      enabled: true,
      allowedIPs: ['127.0.0.1', '::1'],
      rateLimit: {
        requests: 10,
        window: 3600 // 1 hora
      }
    }
    
    fs.writeFileSync(
      path.join(configDir, 'webhook-config.json'),
      JSON.stringify(webhookConfig, null, 2)
    )
    
    // Crear endpoint de webhook
    const webhookEndpoint = `import { NextRequest, NextResponse } from 'next/server'
import { importExtremeNetworksRSS } from '@/lib/rss-importer'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { secret, limit = 10 } = body
    
    // Verificar secret
    const config = require('../../../../automation/webhook-config.json')
    if (secret !== config.secret) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    // Verificar IP (opcional)
    const clientIP = request.headers.get('x-forwarded-for') || 
                    request.headers.get('x-real-ip') || 
                    'unknown'
    
    console.log(\`RSS Import webhook triggered from IP: \${clientIP}\`)
    
    // Ejecutar importaci√≥n
    const result = await importExtremeNetworksRSS({ limit, dryRun: false })
    
    return NextResponse.json({
      success: true,
      imported: result.imported,
      skipped: result.skipped,
      errors: result.errors,
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    console.error('Webhook error:', error)
    return NextResponse.json(
      { error: 'Import failed', message: error.message },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    service: 'RSS Import Webhook',
    status: 'active',
    endpoint: '/api/webhook/rss-import',
    method: 'POST',
    requiredFields: ['secret'],
    optionalFields: ['limit']
  })
}`
    
    const webhookDir = path.join(__dirname, '..', 'src', 'app', 'api', 'webhook', 'rss-import')
    if (!fs.existsSync(webhookDir)) {
      fs.mkdirSync(webhookDir, { recursive: true })
    }
    
    fs.writeFileSync(
      path.join(webhookDir, 'route.ts'),
      webhookEndpoint
    )
    
    // Documentaci√≥n de automatizaci√≥n
    const automationDocs = `# Automatizaci√≥n del Blog RSS

## Configuraci√≥n Completada

### 1. Cron Job Diario
- **Horario**: Todos los d√≠as a las 6:00 AM
- **Comando**: \`node scripts/import-extreme-rss.js --limit=10\`
- **Script**: \`automation/daily-import.sh\`
- **Log**: \`automation/import.log\`

#### Para activar el cron job:
\`\`\`bash
# Editar crontab
crontab -e

# Agregar esta l√≠nea:
0 6 * * * ${process.cwd()}/automation/daily-import.sh
\`\`\`

### 2. Webhook para Importaci√≥n Manual
- **Endpoint**: \`/api/webhook/rss-import\`
- **M√©todo**: POST
- **Secret**: \`${webhookConfig.secret}\`

#### Ejemplo de uso:
\`\`\`bash
curl -X POST http://localhost:3000/api/webhook/rss-import \\
  -H "Content-Type: application/json" \\
  -d '{"secret": "${webhookConfig.secret}", "limit": 5}'
\`\`\`

### 3. Monitoreo
- Logs se guardan en \`automation/import.log\`
- Configuraci√≥n en \`automation/\`
- Estado del webhook: GET \`/api/webhook/rss-import\`

### 4. Mantenimiento
- Revisar logs regularmente
- Ajustar l√≠mite de importaci√≥n seg√∫n necesidad
- Rotar logs mensualmente

## Pr√≥ximos Pasos
1. Configurar cron job en el servidor de producci√≥n
2. Configurar alertas por email en caso de errores
3. Implementar dashboard de monitoreo
4. Configurar backup autom√°tico de contenido importado
`
    
    fs.writeFileSync(
      path.join(configDir, 'README.md'),
      automationDocs
    )
    
    // Crear archivo de log inicial
    fs.writeFileSync(
      path.join(configDir, 'import.log'),
      `# Log de Importaci√≥n RSS - Iniciado ${new Date().toISOString()}\n`
    )
    
    console.log('‚úÖ Automatizaci√≥n configurada exitosamente!')
    console.log('\nüìã Archivos creados:')
    console.log('   üìÅ automation/cron-config.json')
    console.log('   üìÅ automation/daily-import.sh')
    console.log('   üìÅ automation/webhook-config.json')
    console.log('   üìÅ automation/README.md')
    console.log('   üìÅ automation/import.log')
    console.log('   üìÅ src/app/api/webhook/rss-import/route.ts')
    
    console.log('\nüîß Para activar:')
    console.log('   1. Configurar cron job: crontab -e')
    console.log('   2. Agregar l√≠nea: 0 6 * * * ' + process.cwd() + '/automation/daily-import.sh')
    console.log('   3. Probar webhook: curl -X POST http://localhost:3000/api/webhook/rss-import')
    
    console.log(`\nüîë Webhook Secret: ${webhookConfig.secret}`)
    
    return {
      cronJob: true,
      webhook: true,
      secret: webhookConfig.secret
    }
    
  } catch (error) {
    console.error('‚ùå Error configurando automatizaci√≥n:', error.message)
    process.exit(1)
  }
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  setupAutomation()
}

module.exports = { setupAutomation }
